import logging

from aiogram import Bot, Dispatcher, executor, types
from keyboard import *
from database import *

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "6733527659:AAEaRUH7waFYNP228DOqtlTF9SHu5YcfipE"

bot = Bot(token=BOT_TOKEN, parse_mode='Markdown')
dp = Dispatcher(bot)

currencies = {
    'usd': ['üá∫üá∏ –î–æ–ª–ª–∞—Ä, –°–®–ê', 1],
    'rub': ['üá∑üá∫ –†—É–±–ª—å', 92.5],
    'uzs': ['üá∫üáø –°—É–º, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω', 12505],
    'eur': ['üá™üá∫ –ï–≤—Ä–æ', 0.93],
    'gbp': ['üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥', 0.79],
    'jpy': ['üáØüáµ –ò–µ–Ω–∞', 150.22],
    'cny': ['üá®üá≥ –Æ–∞–Ω—å', 7.12],
    'try': ['üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞', 30.84],
    'kzt': ['üá∞üáø –¢–µ–Ω–≥–µ', 450.04],
}


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await create_user(message.from_user.id)
    user = await get_user(message.from_user.id)
    btn = await start_reply(currencies[user[0]][0], currencies[user[1]][0])
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n–¢—É—Ç –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö.\n*–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.*', reply_markup=btn)


@dp.message_handler(text="üîÑ")
async def replace_handler(message: types.Message):
    user = await get_user(message.from_user.id)
    await update_user(user[2], user[1], user[0])
    btn = await start_reply(currencies[user[1]][0], currencies[user[0]][0])
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç–µ —Å *{currencies[user[1]][0]}* –Ω–∞ *{currencies[user[0]][0]}*', reply_markup=btn)


@dp.callback_query_handler(text_contains='from_cur:')
async def fromCur_query(call: types.CallbackQuery):
    await call.answer()
    user = await get_user(call.from_user.id)
    currency = call.data.split(':')[1]
    if currency != user[1]:
        await update_user(call.from_user.id, currency, user[1])
        btn = await start_reply(currencies[currency][0], currencies[user[1]][0])
        await call.message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç–µ —Å *{currencies[currency][0]}* –Ω–∞ *{currencies[user[1]][0]}*', reply_markup=btn)
    else:
        await call.message.answer('*–ù–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã!*')


@dp.callback_query_handler(text_contains='to_cur:')
async def toCur_query(call: types.CallbackQuery):
    await call.answer()
    user = await get_user(call.from_user.id)
    currency = call.data.split(':')[1]
    if currency != user[0]:
        await update_user(call.from_user.id, user[0], currency)
        btn = await start_reply(currencies[user[0]][0], currencies[currency][0])
        await call.message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç–µ —Å *{currencies[user[0]][0]}* –Ω–∞ *{currencies[currency][0]}*', reply_markup=btn)
    else:
        await call.message.answer('*–ù–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã!*')


@dp.message_handler()
async def text_handler(message: types.Message):
    user = await get_user(message.from_user.id)

    text_finded = False
    for value in currencies.values():
        if message.text in value:
            text_finded = value
            break
    else:
        text_finded = False

    if text_finded:
        currency = [key for key, value in currencies.items() if text_finded[0] in value][0]

        if user[0] == currency:
            btn = await currencies_inline(currencies, 'from_cur')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=btn)
        elif user[1] == currency:
            btn = await currencies_inline(currencies, 'to_cur')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=btn)
    else:
        try:
            cur_sum = float(message.text)
            cur_in_usd = currencies[user[0]][1]
            to_cur_in_usd = currencies[user[1]][1]
            sum = round(cur_sum / cur_in_usd * to_cur_in_usd, 2)
            await message.answer(f'*{cur_sum}* _{user[0].upper()}_ = *{sum}* _{user[1].upper()}_')
        except ValueError:
            await message.answer('*–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞!*')


if __name__ == "__main__":
    create_tables()
    executor.start_polling(dp, skip_updates=True)